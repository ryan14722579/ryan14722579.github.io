<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>题解 P1541 【乌龟棋】</title>
      <link href="2021/01/27/%E9%A2%98%E8%A7%A3%20P1541%20%E3%80%90%E4%B9%8C%E9%BE%9F%E6%A3%8B%E3%80%91/"/>
      <url>2021/01/27/%E9%A2%98%E8%A7%A3%20P1541%20%E3%80%90%E4%B9%8C%E9%BE%9F%E6%A3%8B%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>乌龟棋的棋盘是一行$N$个格子，每个格子上一个分数（非负整数）。棋盘第$1$格是唯一的起点，第$N$格是终点，游戏要求玩家控制一个乌龟棋子从起点出发走到终点。</p><p>乌龟棋中$M$张爬行卡片，分成$4$种不同的类型 ，每种类型的卡片上分别标有 $1,2,3,4$ 四个数字之一，表示使用这种卡片后，乌龟棋子将向前爬行相应的格子数。游戏中，玩家每次需要从所有的爬行卡片中选择一张之前没有使用过的爬行卡片，控制乌龟棋子前进相应的格子数，每张卡片只能使用一次。</p><p>游戏中，乌龟棋子自动获得起点格子的分数，并且在后续的爬行中每到达一个格子，就得到该格子相应的分数。玩家最终游戏得分就是乌龟棋子从起点到终点过程中到过的所有格子的分数总和。</p><p>很明显，用不同的爬行卡片使用顺序会使得最终游戏的得分不同，小明想要找到一种卡片使用顺序使得最终游戏得分最多。</p><p>现在，告诉你棋盘上每个格子的分数和所有的爬行卡片，你能告诉小明，他最多能得到多少分吗？</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>我们发现，每种卡片的数量很少，并且我们的移动格数只和我们使用的牌有关，所以我们可以考虑将每一种牌的使用数量作为状态来进行$DP$ 。我们假设 $dp[p_1][p_2][p_3][p_4]$表示标有$1$的卡使用了$p_1$张，……，标有$4$ 的卡使用了$p_4$ 张所能获得的最大分。</p><p>接下来考虑状态如何转移。</p><p>记当前位置 $place=1+p_1+2p_2+3p_3+p_4$。我们考虑当前状态下上一次用了哪一种卡片。</p><p>如果 $p_1\le 0$ ，那么最后一次可以使用了一张标有 $1$ 的卡片，此时$dp[p_1][p_2][p_3][p_4]=dp[p_1][p_2][p_3][p_4]+a[place]$ 。<br>如果 $p_2\le 0$ ，那么 $dp[p_1][p_2][p_3][p_4] = dp[p_1][p_2 - 1][p_3][p_4] + a[place]$ 。<br>如果 $p_3\le 0$ ，那么 $dp[p_1][p_2][p_3][p_4] = dp[p_1][p_2][p_3 - 1][p_4] + a[place]$ 。<br>如果 $p_4\le 0$ ，那么 $dp[p_1][p_2][p_3][p_4] = dp[p_1][p_2][p_3][p_4 - 1] + a[place]$ 。<br>程序实现中四者取最大值即可。</p><p>初始条件为：$dp[0][0][0][0] = a[1]$ ，即不使用任何卡片时，在第一格，自动获得了第一格的分数。</p><p>假设给出的标有 $1,2,3,4$ 的卡片数量分别为 $n_1,n_2,n_3,n_4$，那么最终答案就是 $dp[n_1][n_2][n_3][n_4]$ 。</p><p>而 $n_1,n_2,n_3,n_4$ 可以放在一个数组中，因此最终总体复杂度约为 $\Theta((\frac{m}{4})^4)$ 。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;using namespace std;const int N=360;const int M=45;int k,m;int a[N],dp[M][M][M][M];int n[5];int main() &#123;    cin&gt;&gt;k&gt;&gt;m;    for(int i=1;i&lt;=k;i++) cin&gt;&gt;a[i];    for(int i=1;i&lt;=m;i++) &#123;        int x;        cin&gt;&gt;x;        n[x]++;    &#125;    dp[0][0][0][0]=a[1]; //初始化    for(int p1=0;p1&lt;=n[1];p1++) &#123;        for(int p2=0;p2&lt;=n[2];p2++) &#123;            for(int p3=0;p3&lt;=n[3];p3++) &#123;                for(int p4=0;p4&lt;=n[4];p4++) &#123;                    int place=1+p1+2*p2+3*p3+4*p4;                    if(p1&gt;0) dp[p1][p2][p3][p4]=max(dp[p1][p2][p3][p4],dp[p1-1][p2][p3][p4]+a[place]);                    if(p2&gt;0) dp[p1][p2][p3][p4]=max(dp[p1][p2][p3][p4],dp[p1][p2-1][p3][p4]+a[place]);                    if(p3&gt;0) dp[p1][p2][p3][p4]=max(dp[p1][p2][p3][p4],dp[p1][p2][p3-1][p4]+a[place]);                    if(p4&gt;0) dp[p1][p2][p3][p4]=max(dp[p1][p2][p3][p4],dp[p1][p2][p3][p4-1]+a[place]);                &#125;            &#125;        &#125;    &#125;    cout&lt;&lt;dp[n[1]][n[2]][n[3]][n[4]]&lt;&lt;endl;    return 0;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>题解 CF255D 【Mr. Bender and Square】</title>
      <link href="2021/01/27/%E9%A2%98%E8%A7%A3%20CF255D%20%E3%80%90Mr.%20Bender%20and%20Square%E3%80%91/"/>
      <url>2021/01/27/%E9%A2%98%E8%A7%A3%20CF255D%20%E3%80%90Mr.%20Bender%20and%20Square%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF255D">在洛谷查看题目</a>  |  <a href="http://codeforces.com/problemset/problem/255/D">在CF查看题目</a>    </p><h1 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h1><p>给出一个 $n\times n$ 的正方形和一个点的坐标（$x，y$），从这个点每秒可以向外扩散四个点，即 $(x+1,y),(x-1,y),(x,y+1),(x,y-1)$ ,求需要多少秒才能大于或等于面积 $c$   </p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>如果将这个点看作是在无限大的正方形上扩散，那么我们可以得出：  </p><p>扩散时间: 0   1   2    </p><p>点的数量: 1   5   13</p><p>于是，为了得出扩散时间和点的数量的关系，设一个二次函数为 $y=ax^2+bx+c$ 。（ $x$ 为扩散时间， $y$ 为点的数量）<br>将上表的数据带入二次函数就得到了一个三元一次方程（由于洛谷数学公式无法达到效果，所以只好在本地写好截屏），图片如下：  </p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/hft8bny4.png"></p><p>$\therefore$ 这个二次函数为： $y=2x^2+2x+1$   </p><p>现在我们开始考虑边缘阻挡了的点的数量。<br>不难发现，在边缘以外需要减去的点组成了一个像金字塔一样的三角形（第一层有 $1$ 个，第二层有 $3$ 个 ……），图片如下（手画很丑，请见谅）：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7ty1nwh0.png"></p><p>这个图片的扩散时间为 $3$ ，蓝色区域代表点，红色边框在 $3\times 3$ 的正方形边缘外，绿色圆圈圈出的三角形即为突出部分。<br>提供一下小学奥数的知识：<br>$1+3+5+…+2n-1=n^2$<br>因此，就可以得出突出部分的点数，其他几个边也一样。</p><p>然后，你会发现突出部分有重叠，如下图绿圈部分：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/7ty1nwh0.png"></p><p>多次画图后，发现：重叠部分是个每层点数相差1的三角形，于是就可以用高斯求和 $(1+2+3+…+n=\frac{(1+n)n}{2})$ 算出重叠部分点数。<br>所以<strong>总的点数=忽略边缘时的点数-四边突出的点数+重叠部分的点数</strong>。<br>注：+重叠部分的点数是根据容斥原理</p><p>有了公式，就可以二分查找答案了！</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><strong>注：二分查找注意边界！</strong></p><pre><code class="cpp">#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int INF=1e9+10;ll n,x,y,c; int main() &#123;    cin&gt;&gt;n&gt;&gt;x&gt;&gt;y&gt;&gt;c;    x--;y--;    ll l=0,r=2*n+1,ans=INF;    while(l&lt;=r) &#123;        ll mid=(l+r)/2;        ll s=2*mid*mid+2*mid+1; //忽略边界的点数        if(mid-x&gt;0) s-=(mid-x)*(mid-x); //上边突出部分        if(mid-(n-1-x)&gt;0) s-=(mid-(n-1-x))*(mid-(n-1-x)); //下边突出部分        if(mid-y&gt;0) s-=(mid-y)*(mid-y); //左边突出部分        if(mid-(n-1-y)&gt;0) s-=(mid-(n-1-y))*(mid-(n-1-y)); //右边突出部分                if(mid-x-(n-y-1)-1&gt;0) s+=(1+mid-x-(n-y-1)-1)*(mid-x-(n-y-1)-1)/2; //右上重叠部分        if(mid-(n-1-x)-(n-1-y)&gt;0) s+=(1+mid-(n-1-x)-(n-1-y)-1)*(mid-(n-1-x)-(n-1-y)-1)/2; //右下重叠部分        if(mid-(n-1-x)-y-1&gt;0) s+=(1+mid-(n-1-x)-y-1)*(mid-(n-1-x)-y-1)/2; //左下重叠部分        if(mid-y-x-1&gt;0) s+=(1+mid-y-x-1)*(mid-y-x-1)/2; //左上重叠部分        if(s&gt;=c) &#123;            r=mid-1;            ans=min(mid,ans);        &#125;        else &#123;            l=mid+1;        &#125;    &#125;    cout&lt;&lt;ans&lt;&lt;endl;    return 0;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/27/hello-world/"/>
      <url>2021/01/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
